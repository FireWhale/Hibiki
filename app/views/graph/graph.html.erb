<% content_for :title do %>Interactive Graph<% end %>

<section class="ppt-section-main">
  <div class="ppt-section-header">
    <span class="ppt-header-span">Graph</span> Hibiki Database
  </div>

  <div class="ppt-container-graph">
    <div class="ppt-container-wrapper">
      <nav id="popoto-taxonomy" class="ppt-taxo-nav">
        <!-- Label/taxonomy filter will be generated here -->
      </nav>
      <nav id="popoto-info" class="ppt-info-nav" data-id="0">
      </nav>
    </div>
    <div id="popoto-graph" class="ppt-div-graph">
      <!-- Graph will be generated here-->
    </div>
  </div>

  </section>

<script>
    /**
     * URL used to access Neo4j REST API to execute queries.
     * Update this parameter to your running server instance.
     *
     * For more information on Neo4J REST API the documentation is available here: http://neo4j.com/docs/stable/rest-api-cypher.html
     */
    popoto.rest.CYPHER_URL = "http://24.118.149.105:39584/db/data/transaction/commit";
    /**
     * Add this authorization property if your Neo4j server uses basic HTTP authentication.
     * The value of this property must be "Basic <payload>", where "payload" is a base64 encoded string of "username:password".
     *
     * "btoa" is a JavaScript function that can be used to encode the user and password value in base64 but it is recommended to directly use the Base64 value.
     *
     *  For example Base64 encoded value of "neo4j:password" is "bmVvNGo6cGFzc3dvcmQ="
     *  Note that it is not a safe way to keep credentials as anyone can have access to this code in your web page.
     */
    popoto.rest.AUTHORIZATION = "Basic " + btoa("neo4j:<%= Rails.application.secrets.neo4j_password %>");
    /**
     * Define the Label provider you need for your application.
     * This configuration is mandatory and should contain at least all the labels you could find in your graph model.
     *
     * In this version only nodes with a label are supported.
     *
     * By default If no attributes are specified Neo4j internal ID will be used.
     * These label provider configuration can be used to customize the node display in the graph.
     * See www.popotojs.com or example for more details on available configuration options.
     */
    popoto.provider.node.Provider = {
        "Album": {
            "returnAttributes": ["name", "`catalog number`", "image_path", "`release date`", "references", "uuid"],
            "constraintAttribute": "uuid",
            "getDisplayType": function () {return popoto.provider.node.DisplayTypes.IMAGE;},
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Artist": {
            "returnAttributes": ["name","references","uuid"],
            "constraintAttribute": "uuid",
            "getDisplayType": function () {return popoto.provider.node.DisplayTypes.IMAGE;},
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Organization": {
            "returnAttributes": ["name","references","uuid"],
            "constraintAttribute": "uuid",
            "getDisplayType": function () {return popoto.provider.node.DisplayTypes.IMAGE;},
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Source": {
            "returnAttributes": ["name","references","uuid"],
            "constraintAttribute": "uuid",
            "getDisplayType": function () {return popoto.provider.node.DisplayTypes.IMAGE;},
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Song": {
            "returnAttributes": ["name","`disc number`","`release date`","duration","`track number`","references","uuid"],
            "constraintAttribute": "uuid",
            "getDisplayType": function () {return popoto.provider.node.DisplayTypes.IMAGE;},
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Season": {
            "returnAttributes": ["name","`start date`","image_path","`end date`","uuid"],
            "constraintAttribute": "uuid",
            "getDisplayType": function () {return popoto.provider.node.DisplayTypes.IMAGE;},
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Event": {
            "returnAttributes": ["name", "abbreviation","`start date`","`end date`", "references","uuid"],
            "constraintAttribute": "uuid",
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },
        "Tag": {
            "returnAttributes": ["name","uuid"],
            "constraintAttribute": "uuid",
            "autoExpandRelations": false // if set to true Person nodes will be automatically expanded in graph
        },

    };
    /**
     * For this version, popoto.js has been generated with debug traces you can activate with the following properties:
     * The value can be one in DEBUG, INFO, WARN, ERROR, NONE.
     *
     * With INFO level all the executed cypher query can be seen in the navigator console.
     * Default is NONE
     */
     //popoto.logger.LEVEL = popoto.logger.LogLevels.DEBUG;
    /**
     * Start popoto.js generation.
     * The function requires the label to use as root element in the graph.
     */

    <% if @query[:paged].blank? %>
      var schema = 'Album'
    <% else %>
      var schema = {
        label: "<%= @query[:paged].first[:label] %>",
        rel_count: <%= @query[:paged].first[:count] %>,
        value: {
            name: "<%= @query[:paged].first[:name] %>",
            uuid: <%= @query[:paged].first[:uuid] %>
        }
      }
    <% end %>

    popoto.start(schema);

</script>