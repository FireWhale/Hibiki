class PostsController < ApplicationController
  load_and_authorize_resource
  
  def show
    @post = Post.find(params[:id])
    @contentarray = @post.content.split("\n")
  end
  
  def new
    @post = Post.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @album }
    end    
  end
  
  def addtopost
    #Need to figure out where to append the form
    @divid = params[:div_id]
    #And then what's in the form
    @fieldsfornames = params[:fields_for]
    @label = params[:label]
    autocomplete = params[:autocomplete]
    if autocomplete.nil? == false
      @autocompletepath = "autocomplete_" + autocomplete + '_' + autocomplete.split('_')[0] + 's_path'
    end
  end
  
  def create
    #Some dictionary terms:
    #message part = part of a post generated by code. aka an album, or a source's albums. joined to make a message
    #message = A post
    #message array = Collec
    
    #Grab the destination and original message
    destination = params[:post].delete :destination
    message = params[:message].delete :message
    
    #Make an empty message if not brought in from params
    if message.nil? == true
      message = ""
    end
        
    #Grab the models to append a record
    albumids = params[:albums]
    artistids = params[:artists]
    sourceids = params[:sources]
    organizationids = params[:organizations]
    seasons = params[:seasons] #There will always be only one season because seasons are big.
    
    @post = Post.new(params[:post])
    @post.category = "Luelinks Post"
    
    #Loading up the destination
    if params[:post][:recipient] == "Testing Topic"
      topicid = "8606650"    
      method = "llpost"
    elsif params[:post][:recipient] == "Main Topic"
      topicid = "8123536"
      method = "llpost"
    else
      topicid = "8606650" #In case I want to create a LL post without actually posting? idk
      method = ""
    end
    
    #Building the message
    messagearray = [] #The array is a collection of messages aka posts

    #Handle individual Albums specified.
    if albumids.nil? == false
      albumids.reject! {|n| n.empty? }
      message = message + "\n"
      albumids.each do |each|
        album = Album.find_by_id(each)
        if album.nil? == false
          message = message + Post.add_album_info(album, topicid)
          if message.length > 9000
            message = message + "\n Continued next post\n"
            messagearray << message
            message = ""
          end
        end
      end
    end

    #Handle artists
    if artistids.nil? == false
      artistids.reject!  {|n| n.empty? }
      message = message + "\n"
      artistids.each do |each|
        artist = Artist.includes(:albums).find_by_id(each)
        if artist.nil? == false
          #Artist name
          message = message + "\n\n<pre>Info for " + name_language_helper(artist,User.find(1),0) + "\n</pre>"
          #Albums:
          message = message + "Albums:\n"
          albums = artist.albums
          albums.sort! { |a,b| a.releasedate <=> b.releasedate}
          albums.each do |album|
            message = message + Post.add_album_info(album, topicid)
            if message.length > 9000
              message = message + "\n Continued next post\n"
              messagearray << message
              message = ""
            end           
          end
        end
      end
    end
    
    if sourceids.nil? == false
      sourceids.reject!  {|n| n.empty? }
      message = message + "\n"     
      sourceids.each do |each|
        source = Source.includes(:albums).find_by_id(each)
        if source.nil? == false
          #Artist name
          message = message + "\n\n<b><u>" + name_language_helper(source,User.find(1),0) + ":</u></b>\n"
          #Albums:
          message = message + "Albums:\n"
          albums = source.albums
          albums.sort! { |a,b| a.releasedate <=> b.releasedate}
          albums.each do |album|
            message = message + Post.add_album_info(album, topicid)
            if message.length > 9000
              message = message + "\n Continued next post\n"
              messagearray << message
              message = ""
            end          
          end
        end
      end
    end    


    #Handle organizations
    if organizationids.nil? == false
      organizationids.reject!  {|n| n.empty? }
      message = message + "\n"
      organizationids.each do |each|
        organization = Organization.includes(:albums).find_by_id(each)
        if organization.nil? == false
          #Artist name
          message = message + "\n\n<pre>Info for " + name_language_helper(organization,User.find(1),0) + "\n</pre>"
          #Albums:
          message = message + "Albums:\n"
          albums = organization.albums
          albums.sort! { |a,b| a.releasedate <=> b.releasedate}
          albums.each do |album|
            message = message + Post.add_album_info(album, topicid)
            if message.length > 9000
              message = message + "\n Continued next post\n"
              messagearray << message
              message = ""
            end           
          end
        end
      end
    end
        
    if seasons.nil? == false && seasons != [""]
      season = Season.find(seasons.first)
      if season.nil? == false
        message = message + "\n\n<pre>Info for " + season.name + "\n</pre>"
        season.sources.each do |source|
          if source.empty? == false
            #Artist name
            message = message + "\n\n<b><u>" + name_language_helper(source,User.find(1),0) + ":</u></b>"
            #Albums:
            message = message + 'Albums:\n'
            albums = source.albums
            albums.sort! { |a,b| a.releasedate <=> b.releasedate}
            albums.each do |album|
              message = message + Post.add_album_info(album, topicid)
              if message.length > 9000
                message = message + "\n Continued next post\n"
                messagearray << message
                message = ""
              end            
            end
          end          
        end
      end  
    end
    
    #Put the last message into messagearray. 
    if message.empty? == false
      messagearray << message
    end
    #Save the message into the post
    @post.content = messagearray.join(" ")
  
    #Post the message
      if method == "llpost"
        topicurl = "http://boards.endoftheinter.net/showmessages.php?topic=" + topicid
        
        PostWorker.perform_async(messagearray,topicurl)
      end
      
    #redirect afterward
    respond_to do |format|
      if @post.save
        format.html { redirect_to @post, notice: 'Post Created!' }
        format.json { render json: @post, status: :created, location: @post }
      else
        format.html { render action: "new" }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end 
    end
  end
  

  
end
