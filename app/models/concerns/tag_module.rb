module TagModule
  extend ActiveSupport::Concern

  included do
    has_many :taglists, dependent: :destroy, as: :subject
    has_many :tags, through: :taglists

    scope :with_tag, ->(tag_ids) {joins(:taglists).where('taglists.tag_id IN (?)', tag_ids).distinct unless tag_ids.nil?}

    attr_accessor :new_tags
    attr_accessor :new_tags_by_name
    attr_accessor :remove_taglists
    after_save :manage_tags
  end

  private
    def manage_tags
      #Destroy Taglists
      remove_taglists = self.remove_taglists
      unless remove_taglists.blank?
        remove_taglists.each do |id|
          taglist = self.taglists.find_by_id(id)
          taglist.destroy unless taglist.nil?
        end
      end

      #Create Taglists
      new_tags = HashWithIndifferentAccess.new(self.new_tags)
      unless new_tags.blank?
        new_tags[:id].try(:each) do |id|
          tag = Tag.find_by_id(id)
          self.tags << tag unless tag.nil?
        end
      end

      #Create Taglists by name
      new_tags_by_name = HashWithIndifferentAccess.new(self.new_tags_by_name)
      unless new_tags_by_name.blank?
        new_tags_by_name[:internal_name].try(:each) do |name|
          tag = Tag.find_by_internal_name(name)
          tag = Tag.create(internal_name: name, visibility: "Scraper", classification: "Generated by scrape", model_bitmask: Tag.get_bitmask(self.class.name)) if tag.nil?
          self.tags << tag
        end
      end
    end

end
